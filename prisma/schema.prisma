// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                     String                   @id @default(uuid()) @db.Uuid
  first_name             String
  last_name              String?
  email                  String                   @unique
  phone_number           String?                  @unique
  password_hash          String
  role                   Role
  created_at             DateTime                 @default(now())
  updated_at             DateTime                 @updatedAt
  email_verified         Boolean                  @default(false)
  phone_verified         Boolean                  @default(false)
  date_of_birth          DateTime?
  address                String?
  profile_picture        String?
  bookings               Booking[]
  reservations           Reservation[]
  notifications          Notification[]
  favorites              Favorite[]
  images                 Image[]
  search_history         SearchHistory[]
  recent_searches        RecentSearch[]
  reviews                Review[]
  user_roles             UserRole[]
  transactions           Transaction[]
  user_activity          UserActivity[]
  addresses              Address[]
  Profile                Profile?
  Trip                   Trip[]
  ExternalIntegration    ExternalIntegration[]
  socialLogins           SocialLogin[]
  refreshToken           RefreshToken?
  emailVerification      EmailVerification?
  phoneVerification      PhoneVerification?
  passwordReset          PasswordReset?
  serviceProvider        ServiceProvider?
  travelAgency           TravelAgency?
  serviceOrders          ServiceOrder[]
  packageOrders          PackageOrder[]
  NotificationPreference NotificationPreference[]
  PushToken              PushToken[]
  UserSession            UserSession[]
}

model UserSession {
  id            String    @id @default(uuid()) @db.Uuid
  ip_address    String? // Optional field
  user_agent    String? // Optional field
  is_active     Boolean   @default(true)
  last_activity DateTime?
  user_id       String    @db.Uuid
  user          User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
}

model RefreshToken {
  id         String   @id @default(uuid()) @db.Uuid
  userId     String   @unique @db.Uuid
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token      String
  expiresAt  DateTime
  created_at DateTime @default(now())
}

model EmailVerification {
  id         String   @id @default(uuid()) @db.Uuid
  userId     String   @unique @db.Uuid
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token      String
  expiresAt  DateTime
  created_at DateTime @default(now())
}

model PhoneVerification {
  id         String   @id @default(uuid()) @db.Uuid
  userId     String   @unique @db.Uuid
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  code       String
  expiresAt  DateTime
  created_at DateTime @default(now())
}

model PasswordReset {
  id         String   @id @default(uuid()) @db.Uuid
  userId     String   @unique @db.Uuid
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token      String
  expiresAt  DateTime
  created_at DateTime @default(now())
}

model SocialLogin {
  id         String         @id @default(uuid()) @db.Uuid
  userId     String         @db.Uuid
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider   SocialProvider
  providerId String
  created_at DateTime       @default(now())
  updated_at DateTime       @updatedAt

  @@unique([userId, provider])
  @@index([providerId, provider])
}

enum SocialProvider {
  GOOGLE
  FACEBOOK
  APPLE
}

enum Role {
  USER
  SERVICE_PROVIDER
  ADMIN
  TRAVEL_AGENCY
}

model Profile {
  id              String   @id @default(uuid()) @db.Uuid
  user_id         String   @unique @db.Uuid
  user            User     @relation(fields: [user_id], references: [id],onDelete: Cascade)
  bio             String?
  theme           String   @default("light")
  language        String   @default("en")
  profile_picture String?
  address         String?
  updated_at      DateTime @updatedAt
}

model Hotel {
  id                     String     @id @default(uuid()) @db.Uuid
  name                   String
  address                String
  rating                 Float
  price_per_night        Float
  amenities              String[]
  available_rooms        Int
  images                 Image[]
  created_at             DateTime   @default(now())
  updated_at             DateTime   @updatedAt
  bookings               Booking[]
  reviews                Review[]
  Favorite               Favorite[]
  description            String?
  check_in_time          String?
  check_out_time         String?
  location               Json? // Stores latitude, longitude, city, country
  cancellation_policy    String?
  property_type          String? // e.g., Hotel, Resort, Apartment, Villa
  star_rating            Int? // Official star rating (1-5)
  has_free_cancellation  Boolean?   @default(false)
  has_breakfast_included Boolean?   @default(false)
  has_parking            Boolean?   @default(false)
  has_pool               Boolean?   @default(false)
  has_gym                Boolean?   @default(false)
  has_restaurant         Boolean?   @default(false)
  has_room_service       Boolean?   @default(false)
  has_spa                Boolean?   @default(false)
  has_wifi               Boolean?   @default(false)
  has_air_conditioning   Boolean?   @default(false)
  is_pet_friendly        Boolean?   @default(false)
  is_family_friendly     Boolean?   @default(false)
  distance_from_center   Float? // Distance from city center in km
}

model Flight {
  id                  String     @id @default(uuid()) @db.Uuid
  flight_number       String
  airline             String
  departure_time      DateTime
  arrival_time        DateTime
  from_airport        String
  to_airport          String
  price               Float
  seat_class          String
  images              Image[]
  created_at          DateTime   @default(now())
  updated_at          DateTime   @updatedAt
  bookings            Booking[]
  reviews             Review[]
  Favorite            Favorite[]
  available_seats     Int? // Number of available seats
  aircraft_type       String? // e.g., Boeing 737, Airbus A320
  has_wifi            Boolean?   @default(false)
  has_entertainment   Boolean?   @default(false)
  has_power_outlets   Boolean?   @default(false)
  meal_service        Boolean?   @default(false)
  baggage_allowance   Int? // Number of bags allowed
  cancellation_policy String? // Cancellation policy details
}

model Trip {
  id                  String            @id @default(uuid()) @db.Uuid
  user_id             String            @db.Uuid
  user                User              @relation(fields: [user_id], references: [id], onDelete: Cascade)
  trip_name           String
  description         String
  start_date          DateTime
  end_date            DateTime
  trip_type           TripType
  price               Float
  created_at          DateTime          @default(now())
  updated_at          DateTime          @updatedAt
  images              Image[]
  reviews             Review[]
  bookings            Booking[]
  favorites           Favorite[]
  max_participants    Int? // Maximum number of participants
  itinerary           Json? // Detailed day-by-day itinerary
  inclusions          String[] // What's included in the trip
  exclusions          String[] // What's not included in the trip
  cancellation_policy String? // Cancellation policy details
  tripDestinations    TripDestination[]
  difficulty_level    String? // e.g., Easy, Moderate, Challenging
  is_guided           Boolean?          @default(false)
  is_family_friendly  Boolean?          @default(false)
  is_accessible       Boolean?          @default(false)
  includes_flight     Boolean?          @default(false)
  includes_hotel      Boolean?          @default(false)
  includes_activities Boolean?          @default(false)
  includes_meals      Boolean?          @default(false)
  travel_style        String? // e.g., Adventure, Luxury, Budget
  theme               String? // e.g., Cultural, Nature, Wellness
}

model TripDestination {
  id             String      @id @default(uuid()) @db.Uuid
  trip_id        String      @db.Uuid
  trip           Trip        @relation(fields: [trip_id], references: [id], onDelete: Cascade)
  destination_id String      @db.Uuid
  destination    Destination @relation(fields: [destination_id], references: [id], onDelete: Cascade)
  created_at     DateTime    @default(now())

  @@unique([trip_id, destination_id])
}

enum TripType {
  ADVENTURE
  MEDICAL
  BUSINESS
  LEISURE
}

model Booking {
  id               String             @id @default(uuid()) @db.Uuid
  user_id          String             @db.Uuid
  user             User               @relation(fields: [user_id], references: [id], onDelete: Cascade)
  booking_type     BookingType
  start_date       DateTime
  end_date         DateTime
  status           BookingStatus
  total_price      Float
  guests           Int?               @default(0)
  special_requests String?
  flight_id        String?            @db.Uuid
  flight           Flight?            @relation(fields: [flight_id], references: [id], onDelete: Cascade)
  hotel_id         String?            @db.Uuid
  hotel            Hotel?             @relation(fields: [hotel_id], references: [id], onDelete: Cascade)
  trip_id          String?            @db.Uuid
  trip             Trip?              @relation(fields: [trip_id], references: [id], onDelete: Cascade)
  cancellation_id  String?            @db.Uuid
  cancellation     CancelationPolicy? @relation(fields: [cancellation_id], references: [id], onDelete: Cascade)
  created_at       DateTime           @default(now())
  updated_at       DateTime           @updatedAt
  Payment          Payment[]
}

enum BookingType {
  FLIGHT
  HOTEL
  TRIP
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELED
  COMPLETED
}

model Reservation {
  id               String            @id @default(uuid()) @db.Uuid
  user_id          String            @db.Uuid
  user             User              @relation(fields: [user_id], references: [id], onDelete: Cascade)
  reservation_type ReservationType
  status           ReservationStatus
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt
}

enum ReservationType {
  FLIGHT
  HOTEL
}

enum ReservationStatus {
  PENDING
  CANCELED
  MODIFIED
}

model CancelationPolicy {
  id          String     @id @default(uuid()) @db.Uuid
  policy_type PolicyType
  description String
  penalty     Float
  created_at  DateTime   @default(now())
  Booking     Booking[]
}

enum PolicyType {
  FULL_REFUND
  PARTIAL_REFUND
  NO_REFUND
}

model Payment {
  id              String         @id @default(uuid()) @db.Uuid
  booking_id      String         @db.Uuid
  booking         Booking        @relation(fields: [booking_id], references: [id], onDelete: Cascade)
  payment_method  PaymentMethod
  amount_paid     Float
  payment_status  PaymentStatus
  payment_date    DateTime       @default(now())
  payment_details PaymentDetail?
  created_at      DateTime       @default(now())
  updated_at      DateTime       @updatedAt
}

model PaymentDetail {
  id             String   @id @default(uuid()) @db.Uuid
  paymentId      String   @unique @db.Uuid
  payment        Payment  @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  transaction_id String
  provider       String
  payment_data   String   @db.Text
  refund_id      String?
  refund_data    String?  @db.Text
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  GOOGLE_PAY
  APPLE_PAY
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}

model Favorite {
  id         String   @id @default(uuid()) @db.Uuid
  user_id    String   @db.Uuid
  user       User     @relation(fields: [user_id], references: [id],onDelete: Cascade)
  hotel_id   String?  @db.Uuid
  hotel      Hotel?   @relation(fields: [hotel_id], references: [id],onDelete: Cascade)
  flight_id  String?  @db.Uuid
  flight     Flight?  @relation(fields: [flight_id], references: [id],onDelete: Cascade)
  trip_id    String?  @db.Uuid
  trip       Trip?    @relation(fields: [trip_id], references: [id],onDelete: Cascade)
  created_at DateTime @default(now())
}

model Image {
  id             String         @id @default(uuid()) @db.Uuid
  user_id        String?        @db.Uuid
  user           User?          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  hotel_id       String?        @db.Uuid
  hotel          Hotel?         @relation(fields: [hotel_id], references: [id], onDelete: Cascade)
  trip_id        String?        @db.Uuid
  trip           Trip?          @relation(fields: [trip_id], references: [id], onDelete: Cascade)
  file_url       String
  file_type      String
  is_featured    Boolean?
  alt_text       String?
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt
  Flight         Flight?        @relation(fields: [flightId], references: [id], onDelete: Cascade)
  flightId       String?        @db.Uuid
  service_id     String?        @db.Uuid
  service        Service?       @relation(fields: [service_id], references: [id], onDelete: Cascade)
  package_id     String?        @db.Uuid
  package        TravelPackage? @relation(fields: [package_id], references: [id], onDelete: Cascade)
  destination_id String?        @db.Uuid
  destination    Destination?   @relation(fields: [destination_id], references: [id], onDelete: Cascade)
  position       Int?           @default(0) // For ordering images
}

model SearchHistory {
  id           String     @id @default(uuid()) @db.Uuid
  user_id      String     @db.Uuid
  user         User       @relation(fields: [user_id], references: [id],onDelete: Cascade)
  search_query String
  search_type  SearchType
  created_at   DateTime   @default(now())
}

enum SearchType {
  FLIGHT
  HOTEL
  TRIP
}

model RecentSearch {
  id           String     @id @default(uuid()) @db.Uuid
  user_id      String     @db.Uuid
  user         User       @relation(fields: [user_id], references: [id],onDelete: Cascade)
  search_query String
  search_type  SearchType
  filters      String[] // e.g., price, location, etc.
  created_at   DateTime   @default(now())
}

model Notification {
  id                String           @id @default(uuid()) @db.Uuid
  title             String
  message           String
  user_id           String           @db.Uuid
  user              User             @relation(fields: [user_id], references: [id], onDelete: Cascade)
  notification_type NotificationType
  entity_id         String?          @db.Uuid
  entity_type       String?
  metadata          Json?
  is_read           Boolean          @default(false)
  created_at        DateTime         @default(now())
}

model NotificationPreference {
  id                  String  @id @default(uuid()) @db.Uuid
  user_id             String  @db.Uuid
  user                User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  email_enabled       Boolean @default(true)
  sms_enabled         Boolean @default(true)
  push_enabled        Boolean @default(true)
  in_app_enabled      Boolean @default(true)
  system_enabled      Boolean @default(true)
  booking_enabled     Boolean @default(true)
  payment_enabled     Boolean @default(true)
  promotional_enabled Boolean @default(false)
  reminder_enabled    Boolean @default(true)
  alert_enabled       Boolean @default(true)
}

enum NotificationType {
  SYSTEM
  BOOKING
  PAYMENT
  PROMOTIONAL
  REMINDER
  ALERT

  NEW_BOOKING
  TRIP_UPDATES
  SPECIAL_OFFERS
}

model PushToken {
  id         String   @id @default(uuid()) @db.Uuid
  user_id    String   @db.Uuid
  user       User     @relation(fields: [user_id], references: [id],onDelete: Cascade)
  token      String
  created_at DateTime @default(now())
}

model Filter {
  id          String     @id @default(uuid()) @db.Uuid
  filter_name String
  filter_type FilterType
  values      String[]
  created_at  DateTime   @default(now())
}

enum FilterType {
  PRICE_RANGE
  AMENITIES
  LOCATION
  BEDROOMS
  BATHROOMS
  SEAT_CLASS
}

model TrendingSearch {
  id           String   @id @default(uuid()) @db.Uuid
  search_query String
  created_at   DateTime @default(now())
}

model UserRole {
  id      String @id @default(uuid()) @db.Uuid
  user_id String @db.Uuid
  role    Role
  user    User   @relation(fields: [user_id], references: [id],onDelete: Cascade)
}

model Review {
  id         String   @id @default(uuid()) @db.Uuid
  user_id    String   @db.Uuid
  user       User     @relation(fields: [user_id], references: [id],onDelete: Cascade)
  hotel_id   String?  @db.Uuid
  hotel      Hotel?   @relation(fields: [hotel_id], references: [id],onDelete: Cascade)
  flight_id  String?  @db.Uuid
  flight     Flight?  @relation(fields: [flight_id], references: [id],onDelete: Cascade)
  trip_id    String?  @db.Uuid
  trip       Trip?    @relation(fields: [trip_id], references: [id],onDelete: Cascade)
  rating     Float
  comment    String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Discount {
  id            String       @id @default(uuid()) @db.Uuid
  code          String       @unique
  description   String
  discount_type DiscountType
  amount        Float
  start_date    DateTime
  end_date      DateTime
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

model Transaction {
  id               String          @id @default(uuid()) @db.Uuid
  user_id          String          @db.Uuid
  user             User            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  transaction_type TransactionType
  amount           Float
  status           PaymentStatus
  created_at       DateTime        @default(now())
}

enum TransactionType {
  PAYMENT
  REFUND
}

model ExternalIntegration {
  id               String @id @default(uuid()) @db.Uuid
  integration_name String
  api_key          String

  user_id    String   @db.Uuid
  user       User     @relation(fields: [user_id], references: [id],onDelete: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model UserActivity {
  id            String       @id @default(uuid()) @db.Uuid
  user_id       String       @db.Uuid
  user          User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  activity_type ActivityType
  activity_data String
  created_at    DateTime     @default(now())
}

enum ActivityType {
  LOGIN
  BOOKING
  PAYMENT
  SEARCH
  REVIEW
}

model Address {
  id          String   @id @default(uuid()) @db.Uuid
  user_id     String   @db.Uuid
  user        User     @relation(fields: [user_id], references: [id],onDelete: Cascade)
  address     String
  city        String
  country     String
  postal_code String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model ServiceProvider {
  id               String    @id @default(uuid()) @db.Uuid
  user_id          String    @unique @db.Uuid
  user             User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  business_name    String
  business_address String?
  business_phone   String?
  business_email   String?
  website          String?
  description      String?
  verified         Boolean   @default(false)
  rating           Float     @default(0)
  services         Service[]
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
}

model Service {
  id               String          @id @default(uuid()) @db.Uuid
  provider_id      String          @db.Uuid
  provider         ServiceProvider @relation(fields: [provider_id], references: [id], onDelete: Cascade)
  name             String
  description      String
  price            Float
  duration         Int // Duration in minutes
  location         String?
  category         String
  availability     Json? // JSON object with availability details
  max_participants Int?
  images           Image[]
  created_at       DateTime        @default(now())
  updated_at       DateTime        @updatedAt
  ServiceOrder     ServiceOrder[]
}

model ServiceOrder {
  id                String      @id @default(uuid()) @db.Uuid
  service_id        String      @db.Uuid
  service           Service     @relation(fields: [service_id], references: [id], onDelete: Cascade)
  user_id           String      @db.Uuid
  user              User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  status            OrderStatus @default(PENDING)
  date              DateTime
  participants      Int         @default(1)
  total_price       Float
  special_requests  String?
  provider_response String?
  created_at        DateTime    @default(now())
  updated_at        DateTime    @updatedAt
}

model TravelAgency {
  id             String          @id @default(uuid()) @db.Uuid
  user_id        String          @unique @db.Uuid
  user           User            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  agency_name    String
  agency_address String?
  agency_phone   String?
  agency_email   String?
  website        String?
  description    String?
  verified       Boolean         @default(false)
  rating         Float           @default(0)
  packages       TravelPackage[]
  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt
}

model TravelPackage {
  id            String         @id @default(uuid()) @db.Uuid
  agency_id     String         @db.Uuid
  agency        TravelAgency   @relation(fields: [agency_id], references: [id], onDelete: Cascade)
  name          String
  description   String
  price         Float
  duration      Int // Duration in days
  destinations  Destination[]
  inclusions    String[]
  exclusions    String[]
  itinerary     Json? // JSON object with day-by-day itinerary
  max_travelers Int?
  images        Image[]
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  PackageOrder  PackageOrder[]
}

model PackageOrder {
  id               String        @id @default(uuid()) @db.Uuid
  package_id       String        @db.Uuid
  package          TravelPackage @relation(fields: [package_id], references: [id], onDelete: Cascade)
  user_id          String        @db.Uuid
  user             User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  status           OrderStatus   @default(PENDING)
  start_date       DateTime
  travelers        Int           @default(1)
  total_price      Float
  special_requests String?
  agency_response  String?
  created_at       DateTime      @default(now())
  updated_at       DateTime      @updatedAt
}

model Destination {
  id          String  @id @default(uuid()) @db.Uuid
  name        String
  country     String
  city        String?
  description String
  latitude    Float?
  longitude   Float?
  currency    String?

  language           String?
  timezone           String?
  safety_index       Float?
  cost_index         Float?
  featured           Boolean?
  meta_title         String?
  meta_description   String?
  activities         String[]
  highlights         String[]
  best_time_to_visit String?
  travel_tips        String[]
  images             Image[]
  packages           TravelPackage[]
  trips              TripDestination[]
  created_at         DateTime          @default(now())
  updated_at         DateTime          @updatedAt
  image_url          String? // Main image URL for the destination
}

enum OrderStatus {
  PENDING
  CONFIRMED
  REJECTED
  COMPLETED
  CANCELLED
}

// System Settings model
model SystemSetting {
  id                     String   @id @default(uuid())
  maintenance_mode       Boolean  @default(false)
  booking_fee_percentage Float    @default(5.0)
  default_currency       String   @default("USD")
  support_email          String
  support_phone          String
  terms_url              String
  privacy_url            String
  created_at             DateTime @default(now())
  updated_at             DateTime @updatedAt
}
