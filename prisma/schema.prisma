// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                  String                @id @default(uuid()) @db.Uuid
  full_name           String
  last_name           String?
  email               String                @unique
  phone_number        String?               @unique
  password_hash       String
  role                Role                  @default(USER)
  created_at          DateTime              @default(now())
  updated_at          DateTime              @updatedAt
  email_verified      Boolean               @default(false)
  phone_verified      Boolean               @default(false)
  date_of_birth       DateTime?
  address             String?
  profile_picture     String?
  bookings            Booking[]
  reservations        Reservation[]
  notifications       Notification[]
  favorites           Favorite[]
  images              Image[]
  search_history      SearchHistory[]
  recent_searches     RecentSearch[]
  reviews             Review[]
  user_roles          UserRole[]
  transactions        Transaction[]
  user_activity       UserActivity[]
  addresses           Address[]
  Profile             Profile?
  Trip                Trip[]
  ExternalIntegration ExternalIntegration[]
  socialLogins        SocialLogin[]
  refreshToken        RefreshToken?
  emailVerification   EmailVerification?
  phoneVerification   PhoneVerification?
  passwordReset       PasswordReset?
}

model RefreshToken {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @unique @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model EmailVerification {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @unique @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model PhoneVerification {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @unique @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model PasswordReset {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @unique @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model SocialLogin {
  id         String         @id @default(uuid()) @db.Uuid
  userId     String         @db.Uuid
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider   SocialProvider
  providerId String
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  @@unique([userId, provider])
  @@index([providerId, provider])
}

enum SocialProvider {
  GOOGLE
  FACEBOOK
  APPLE
}

enum Role {
  USER
  SERVICE_PROVIDER
  ADMIN
}

model Profile {
  id              String   @id @default(uuid()) @db.Uuid
  user_id         String   @unique @db.Uuid
  user            User     @relation(fields: [user_id], references: [id])
  bio             String?
  theme           String   @default("light")
  language        String   @default("en")
  profile_picture String?
  address         String?
  updated_at      DateTime @updatedAt
}

model Hotel {
  id              String     @id @default(uuid()) @db.Uuid
  name            String
  address         String
  rating          Float
  price_per_night Float
  amenities       String[]
  available_rooms Int
  images          Image[]
  created_at      DateTime   @default(now())
  updated_at      DateTime   @updatedAt
  bookings        Booking[]
  reviews         Review[]
  Favorite        Favorite[]
}

model Flight {
  id             String     @id @default(uuid()) @db.Uuid
  flight_number  String
  airline        String
  departure_time DateTime
  arrival_time   DateTime
  from_airport   String
  to_airport     String
  price          Float
  seat_class     String
  images         Image[]
  created_at     DateTime   @default(now())
  updated_at     DateTime   @updatedAt
  bookings       Booking[]
  reviews        Review[]
  Favorite       Favorite[]
}

model Trip {
  id          String     @id @default(uuid()) @db.Uuid
  user_id     String     @db.Uuid
  user        User       @relation(fields: [user_id], references: [id])
  trip_name   String
  description String
  start_date  DateTime
  end_date    DateTime
  trip_type   TripType
  price       Float
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  images      Image[]
  reviews     Review[]
  Booking     Booking[]
  Favorite    Favorite[]
}

enum TripType {
  ADVENTURE
  MEDICAL
  BUSINESS
  LEISURE
}

model Booking {
  id              String             @id @default(uuid()) @db.Uuid
  user_id         String             @db.Uuid
  user            User               @relation(fields: [user_id], references: [id])
  booking_type    BookingType
  start_date      DateTime
  end_date        DateTime
  status          BookingStatus
  total_price     Float
  flight_id       String?            @db.Uuid
  flight          Flight?            @relation(fields: [flight_id], references: [id])
  hotel_id        String?            @db.Uuid
  hotel           Hotel?             @relation(fields: [hotel_id], references: [id])
  trip_id         String?            @db.Uuid
  trip            Trip?              @relation(fields: [trip_id], references: [id])
  cancellation_id String?            @db.Uuid
  cancellation    CancelationPolicy? @relation(fields: [cancellation_id], references: [id])
  created_at      DateTime           @default(now())
  updated_at      DateTime           @updatedAt
  Payment         Payment[]
}

enum BookingType {
  FLIGHT
  HOTEL
  TRIP
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELED
  COMPLETED
}

model Reservation {
  id               String            @id @default(uuid()) @db.Uuid
  user_id          String            @db.Uuid
  user             User              @relation(fields: [user_id], references: [id])
  reservation_type ReservationType
  status           ReservationStatus
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt
}

enum ReservationType {
  FLIGHT
  HOTEL
}

enum ReservationStatus {
  PENDING
  CANCELED
  MODIFIED
}

model CancelationPolicy {
  id          String     @id @default(uuid()) @db.Uuid
  policy_type PolicyType
  description String
  penalty     Float
  created_at  DateTime   @default(now())
  Booking     Booking[]
}

enum PolicyType {
  FULL_REFUND
  PARTIAL_REFUND
  NO_REFUND
}

model Payment {
  id              String         @id @default(uuid()) @db.Uuid
  booking_id      String         @db.Uuid
  booking         Booking        @relation(fields: [booking_id], references: [id])
  payment_method  PaymentMethod
  amount_paid     Float
  payment_status  PaymentStatus
  payment_date    DateTime       @default(now())
  payment_details PaymentDetail?
}

model PaymentDetail {
  id             String   @id @default(uuid()) @db.Uuid
  paymentId      String   @unique @db.Uuid
  payment        Payment  @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  transaction_id String
  provider       String
  payment_data   String   @db.Text
  refund_id      String?
  refund_data    String?  @db.Text
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  GOOGLE_PAY
  APPLE_PAY
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}

model Favorite {
  id         String   @id @default(uuid()) @db.Uuid
  user_id    String   @db.Uuid
  user       User     @relation(fields: [user_id], references: [id])
  hotel_id   String?  @db.Uuid
  hotel      Hotel?   @relation(fields: [hotel_id], references: [id])
  flight_id  String?  @db.Uuid
  flight     Flight?  @relation(fields: [flight_id], references: [id])
  trip_id    String?  @db.Uuid
  trip       Trip?    @relation(fields: [trip_id], references: [id])
  created_at DateTime @default(now())
}

model Image {
  id         String   @id @default(uuid()) @db.Uuid
  user_id    String?  @db.Uuid
  user       User?    @relation(fields: [user_id], references: [id])
  hotel_id   String?  @db.Uuid
  hotel      Hotel?   @relation(fields: [hotel_id], references: [id])
  trip_id    String?  @db.Uuid
  trip       Trip?    @relation(fields: [trip_id], references: [id])
  file_url   String
  file_type  String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Flight     Flight?  @relation(fields: [flightId], references: [id])
  flightId   String?  @db.Uuid
}

model SearchHistory {
  id           String     @id @default(uuid()) @db.Uuid
  user_id      String     @db.Uuid
  user         User       @relation(fields: [user_id], references: [id])
  search_query String
  search_type  SearchType
  created_at   DateTime   @default(now())
}

enum SearchType {
  FLIGHT
  HOTEL
  TRIP
}

model RecentSearch {
  id           String     @id @default(uuid()) @db.Uuid
  user_id      String     @db.Uuid
  user         User       @relation(fields: [user_id], references: [id])
  search_query String
  search_type  SearchType
  filters      String[] // e.g., price, location, etc.
  created_at   DateTime   @default(now())
}

model Notification {
  id                String           @id @default(uuid()) @db.Uuid
  user_id           String           @db.Uuid
  user              User             @relation(fields: [user_id], references: [id])
  notification_type NotificationType
  is_enabled        Boolean          @default(true)
  created_at        DateTime         @default(now())
}

enum NotificationType {
  NEW_BOOKING
  TRIP_UPDATES
  SPECIAL_OFFERS
}

model Filter {
  id          String     @id @default(uuid()) @db.Uuid
  filter_name String
  filter_type FilterType
  values      String[]
  created_at  DateTime   @default(now())
}

enum FilterType {
  PRICE_RANGE
  AMENITIES
  LOCATION
  BEDROOMS
  BATHROOMS
  SEAT_CLASS
}

model TrendingSearch {
  id           String   @id @default(uuid()) @db.Uuid
  search_query String
  created_at   DateTime @default(now())
}

model UserRole {
  id      String @id @default(uuid()) @db.Uuid
  user_id String @db.Uuid
  role    Role
  user    User   @relation(fields: [user_id], references: [id])
}

model Review {
  id         String   @id @default(uuid()) @db.Uuid
  user_id    String   @db.Uuid
  user       User     @relation(fields: [user_id], references: [id])
  hotel_id   String?  @db.Uuid
  hotel      Hotel?   @relation(fields: [hotel_id], references: [id])
  flight_id  String?  @db.Uuid
  flight     Flight?  @relation(fields: [flight_id], references: [id])
  trip_id    String?  @db.Uuid
  trip       Trip?    @relation(fields: [trip_id], references: [id])
  rating     Float
  comment    String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Discount {
  id            String       @id @default(uuid()) @db.Uuid
  code          String       @unique
  description   String
  discount_type DiscountType
  amount        Float
  start_date    DateTime
  end_date      DateTime
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

model Transaction {
  id               String          @id @default(uuid()) @db.Uuid
  user_id          String          @db.Uuid
  user             User            @relation(fields: [user_id], references: [id])
  transaction_type TransactionType
  amount           Float
  status           PaymentStatus
  created_at       DateTime        @default(now())
}

enum TransactionType {
  PAYMENT
  REFUND
}

model ExternalIntegration {
  id               String @id @default(uuid()) @db.Uuid
  integration_name String
  api_key          String

  user_id    String   @db.Uuid
  user       User     @relation(fields: [user_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model UserActivity {
  id            String       @id @default(uuid()) @db.Uuid
  user_id       String       @db.Uuid
  user          User         @relation(fields: [user_id], references: [id])
  activity_type ActivityType
  activity_data String
  created_at    DateTime     @default(now())
}

enum ActivityType {
  LOGIN
  BOOKING
  PAYMENT
  SEARCH
  REVIEW
}

model Address {
  id          String   @id @default(uuid()) @db.Uuid
  user_id     String   @db.Uuid
  user        User     @relation(fields: [user_id], references: [id])
  address     String
  city        String
  country     String
  postal_code String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}
